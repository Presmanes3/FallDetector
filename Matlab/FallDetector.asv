function [state] = FallDetector(CSV)

m = readtable(CSV);
M = table2array(m);

time = zeros(length(M(:,1)),1);

for i=2:length(M(:,1))
    time(i) = M(i,1) + time(i-1);
end

figure
plot(time, M(:,2), time, M(:,3), time, M(:,4));
title('Raw Acceleration Data')
legend('X','Y','Z')

figure
plot(time, M(:,5), time, M(:,6), time, M(:,7));
title('Filtered Acceleration Data')
legend('X','Y','Z')

figure
subplot(1,3,1), plot(time, M(:,8))
legend('sma')
subplot(1,3,2), plot(time, M(:,9));
legend('sva')
subplot(1,3,3), plot(time, M(:,10))
legend('ta')
sgtitle('Variables del algoritmo','FontWeight', 'bold','FontSize',11)

% Media m√≥vil de N valores

N=20;

x_filtered = zeros(length(M(:,1)),1);
y_filtered = zeros(length(M(:,1)),1);
z_filtered = zeros(length(M(:,1)),1);

x_filtered(1) = M(1,2)/N;
y_filtered(1) = M(1,3)/N;
z_filtered(1) = M(1,4)/N;

for i=2:N-1
    x_filtered(i) = (M(i,2) + x_filtered(i-1)*N)/N;
    y_filtered(i) = (M(i,3) + y_filtered(i-1))/N;
    z_filtered(i) = (M(i,4) + z_filtered(i-1))/N;
end

for i=N:length(M(:,1))
    x_filtered(i) = 0;
    y_filtered(i) = 0;
    z_filtered(i) = 0;
    for j=0:N-1
        x_filtered(i) = x_filtered(i) + M(i-j,2);
        y_filtered(i) = y_filtered(i) + M(i-j,3);
        z_filtered(i) = z_filtered(i) + M(i-j,4);
    end
    x_filtered(i) = x_filtered(i)/N;
    y_filtered(i) = y_filtered(i)/N;
    z_filtered(i) = z_filtered(i)/N;
end

figure
plot(time, x_filtered, time, y_filtered, time, z_filtered);
title(sprintf('Filtered Acceleration Data with N = %d', N))
legend('X','Y','Z')

sma = zeros(1,length(M(:,1)));
smv = zeros(1,length(M(:,1)));
ta = zeros(1,length(M(:,1)));

for i=1:length(M(:,1))

    total_time=0;
   
   if i<=20;
       k=i-1;
   else 
       k=20;
   end

   for j=i-k:i
        total_time = total_time + M(j,1);
   end

   x_sma = 0;
   y_sma = 0;
   z_sma = 0;
   for j=i-k:i
        x_sma = x_sma + abs(M(j,1)*x_filtered(j));
        y_sma = y_sma + abs(M(j,1)*y_filtered(j));
        z_sma = z_sma + abs(M(j,1)*z_filtered(j));
   end

   sma(i) = (x_sma + y_sma + z_sma)/total_time;
   smv(i) = sqrt(x_filtered(i)^2 + y_filtered(i)^2 + z_filtered(i)^2);
   ta(i) = asind(y_filtered(i)/smv(i));

end

figure
subplot(1,3,1), plot(time, sma)
legend('sma')
subplot(1,3,2), plot(time, smv);
legend('smv')
subplot(1,3,3), plot(time, ta)
legend('ta')
sgtitle('Mis variables del algoritmo','FontWeight', 'bold','FontSize',11)




end